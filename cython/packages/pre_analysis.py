import functools
from packages.analyse import CheckIC, ChiSquare
from packages.pad import Decode

class Kasiski:
    '''
    THIS IS NOT JUST KASISKI  but ic examination at the nth character
    Uses Kasiski's examinstation to discover the key length for a vigenere encoded message
    Think the max might be set at 8 unsure and should be reviesd if this accours
    '''
    def __init__(self, cipher_text):
        cipher_text = cipher_text.replace(' ', '')
        cipher_text = cipher_text.replace('\n', '')
        self.original_cipher_text = cipher_text
        self.cipher_text = self.original_cipher_text
        print('Length of Cipher: %d' % len(self.cipher_text))
        self.multiples_list = self.factors()
        self.alphabet = 'abcdefghijklmnopqrstuvwxyz'
        self.alphabet = [x for x in self.alphabet]
        # if not self.multiples_list:
        #     self.multiples_list = [x for x in range(0, 15, 1)]

    def analyse(self):
        '''
        Analyse the cipher text to find repeating strings,
        :return:
        '''
        import collections
        import itertools
        all_possible_substrings = []
        x = 1

        while x < len(self.cipher_text):
            x += 1
            j = 0
            # print(x)
            while j < len(self.cipher_text):
                substring = self.cipher_text[j:j+x]
                # print(substring)
                if 3 < x:
                    break
                all_possible_substrings.append(substring)
                j += 1

        sorted(all_possible_substrings)

        all_possible_substrings = (collections.Counter(all_possible_substrings))
        # print(all_possible_substrings.most_common())
        return

    def finding_the_key(self, key_length=9):
        from functools import reduce
        '''
        Analyse the cipher text to find repeating strings,
        cipher text is broken for run cipher (vigenere)
        :return:
        '''

        all_chi = []
        all_ic = []
        j = 0
        while j < key_length:
            i = j
            nth_cypher_text = ''
            while i < len(self.cipher_text):
                nth_cypher_text += self.cipher_text[i]
                i += key_length
            # print(nth_cypher_text)

            Chi = ChiSquare(nth_cypher_text)
            ic = Chi.ic
            all_chi.append(Chi.chi_result)
            all_ic.append(ic)
            print(j)
            print(ic)
            print(Chi.chi_result)
            j += 1

        # ave_chi = reduce(lambda x, y: x + y, all_chi) / len(all_chi)
        # ave_ic = reduce(lambda x, y: x + y, all_ic) / len(all_ic)
        # print(all_ic)
        # print('Average IC: %f' % ave_ic)
        # print('Average Chi: %f' % ave_chi)


    def output(self):
        '''
        Returns the calculated multiples
        '''
        return self.multiples_list

    def factors(self):
            '''
            Gets the factors of the length of the cipher text
            :return:
            '''

            n = len(self.cipher_text)
            return(list(set(functools.reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))))

class RealKasiski:
    def __init__(self, cipher_text):
        return
    def run(self):
        return
    def output(self):
        return

if __name__ == '__main__':
    another_cipher_test = '''
    HQCNPXQNRHPRPGJPLOGQEVSIEILNOVQVSQTPCVUDLOGMPGZJPMNVLRFBFGZJ
HZFIHSQTFHMEVIEFESPOLGZJFWXCOHGZJHZVMIEFMPKVUYZVOAJVTRITZBLV
FACGREPLFYWIVANKYKHWICNLCZDQQTQEVTQYNBIQFFNMCKVICPVNWFTWKJMS
KTRPOFWJSNP
    '''
    cypher_text = '''
KIWDY FAIAS YQXQF GMQDZ OHUQK NEFVL
AZPZP CXYDJ QLVGC KXPAS IENMN JYNGA
ODJPJ YNTCF RJUIT ECGGS PVEAB STKTN
BJOHZ OKDHA SGHPR LAEFU OSKRW ANNLG
RTZTT KPYAB QGLQH FVDTQ QORNB ZDOCR
SMQVV QXYVC QNVNE BXKAJ HHBWJ TPVMV
FEQXQ QKAWP EHVQF GMVPU OSGGG KAKYQ
NARZM AKIOS PBZSG KCWWW PPNBE MQMBB
ZMCHZ QSJRW RWPEZ RTCFT ANBOH XBSMC
KJNNT COGCK ZDSWI KIPWG PUYMN NCLXD
MAXNN HLWEC KCAWH IVLNW AORGA CTWQP
HKHRI PRWRZ RNSYQ XQFGM QDZOH ZSKDH
NEGQH ZPNPF VTHCF ENWXM JXYAA SHBMS
YWRUA PAEZM WCMRP PEZEC AGSBF VLQQT
KSNZE REBSL HVBYA WQVSM GEJOW SOKDG
MEREX SKDHT JHQQP QTNNS QTSSJ SBQJL
RTLSN KPVQA XSAIA FVLET RFIPA GWYYV
UMVNG QASVK PQKIQ XQAGX HAZIM XAOAF
PVGHX SKRUW WDMXR ADBPG SEBFM QNFEW
PQVOT ANESN RRRGC WHWHZ CFANK IWBQT
KDAPW XRMPV NWVDQ TSZSA UVBWB SYQTK
PEZNO ZTTNX ZSRNZ TYGRJ HEUCV RAPJN
SSPXH JQZSR WBZJG SBOAB ZOGGI EOHEQ
KBJHY HWYCO NWLZX MXRPN WBYAW QVKJN
BYQSK RRNKP GDNSY GYGRJ HEUCV RTFSO
WSOKD GMDGU QCFTA RWEIO MKAPI VVMVR
NLCDL GYQVO APAEZ NPSGS LPWXM XSGYU
PVGHH KRRTX GOWGL NLASY VIQQG QNBJS
VAMKD AUGPT NZTBH QZXTQ BSQJS JQXYC
OGHAZ IMXAA HLIGO SWBZJ GSEZN TCFNL
BYSZQ PQMVP YJZGL KSNBY AWQVL SIMWH
RTNHR TPGPD XOABW PYQNW CFAPF CGIJZ
ASQXQ WQZCF APVVW MTBET MHZPH GCLQH
FSTSS GFNLO EZRXZ OJGPS SEXSG YUPVX
EWXAP HQSPD XOAQE FQVNW CFAPF CGIJZ
ASAVE ZNPSG SLPEZ RXZON KPGZR MXKSA
FEOIJ ZSKHX SQXYV ASHNV OKGJN TGLEZ
RXZSP VZZUN JZKVH KIWQX BONEP VQMZC
RIHEM QSKRG QAIUA SGPZM VFELM HZOQQ
LYUMH XAPHQ WXSBP AHLIG OSWBZ JGSYV
QSZWY MNJDS KBOMV PSQRX RWNPK ZDVTX
RRKFC VNYVM YWVWX EUCFN AKYQN ARZMT
VMVYK BPNNV CWKYA KJGLS PPQVA SWFVL
EAXRR UPGQA SYOGH AZIMX AOGHF SDVAX
OTGLW XBYVU RELJD QARGS AKIOS XSKQN
FEWPQ VOTAK GENLI SMRPL OVZRO GHVXL
QYQKT PNEDD YTADQ KLOHT POWHW GPUQL
ENLFM DNXSK DHNSS EORKY EFEZN ABOTL
FQHNY AASTB FGSKB SMGEJ QBCRZ RNPDP
BQUHN WKSQX GAGDI IUWHX LANAL WQTSQ
CTZRJ EQQXA PHQSP DXSRN HNVDS QBURZ
WWRNW AAZZN PWMTC FANDY DNXSK QNFEW
PQVOT APYDA XPHDG TJUNP BJQHK IWBQT
KDAPW XRTIW WHQXG UGALW MPCTS KQKNQ
XYVQS LLVQX ZUIQM MMVQJ WYGTL QQEZV
MXNEL NBGWN KBHYH LSQEN RGSGL GOHOP
WYWVH WBXNA ZNBJL MHZOQ QKZDN YAMMG
MZSYS CFNWP KOPMJ KQGMS QRXRW NPKSQ
XYCGD HHZKN JNORR PEHVQ MJMJL HHERB
EKHKI WNZAK SNNYV SWZXO QXEPD GVUAP
NVXMT ZONAP AENTG KRZPP WHXAK ALBWX
TKZXG ENRZS KBHYH LCTRP GLJHL EUVXO
LMVFS NRJJO RNFQA BSMGW QHZQA UPRNK
PVPHQ PQMVP UZRMX KSQLR QXQVO GHXEO
SQFKS NKIOS TPZNG MEZNQ TKSNX JYNWS
GYUPV DMZXR RRFCV AXQJN RIEJR TVAMR
PHHER RU
'''
    test_cipher_text = '''
    HPYHZJXPVFSKHHWOJPKBULWPOPVDFRHRIKUBLZDUSPKAPEWKJISXLKIQJHVFTKXUCNLWMKKPITYRVPZOMMFVKSIAZMDUQEVJGRQTJUFEQRLLTIGNEXO
    ZSIFZDQNTHBIPPLRMOZPOOQXVFTKZEMKHWTTKQSDQYIWOUOAQQVWNHSMKFAOISMAPBZNRSPOUOFPTUIUKHBEERDXYKYVSXKWLNTAPEDKSLJXAMXUVKM
    XOZBHFPXWJJAWSQNLXYNLKIQJHVYKEBIOVRWJIAQOOUDRIVLZFPTPJWKXCEOEBESGSGSJURRJGJPOGVKIUGYBSUJDXBKYMEOEUCUZLLUTKQKYNLAANG
    OIYZLZFSQPXMKRMYXQUHYNPAWFCNRJYZQSEWHXTZOMRFRHEYOUONBVXVJUMBHFMHCXZYMANKQXMKCQGFPUIHOWPESCQHYNPACBPEINSWZOWGGYUUUIS
    XGVLFRSAEF'''
    plain_text = 'DRLRTRBDLPHNLLIOHBWIDVPCLIPCEIOUSHKNQHSXLXWBNHGMONLMIXGSNBBMPYUMSVBOFNMUNRISXSHNASNXPNWSOYUSDVUALYSXBDVKUTVPYDDGFDXVYKUDFOCBOVIHPPLSMLSCEAHLTWMYUISCXDTHBSENLTYKLYOWTPSWBESEKTXOSDHGYNFLLCLVHMNEJLIOHGIDDGBSHFLHHNBVUHHLDRDGKNANRHLTKRSXIMXVFAWNAHNEINGEUEMHINOFOOGOLKKLVSEAHNDSCBOOPBNHIAGRLSDAPPEITYOINIGAAVAVISEFTQFOBRSFEIBRDWMRTLIKLBIFSORMFRUHMYLHFLLRHHBAILVUVSYSGNVECLQIACEQVXIMIHQVYLTMBNSYVPMRUCVATNOARONMAMNWSXDONMYEAELFLNYWNOSWVTCGUHPKLHTHRBSLKNRSYRFNGSSELYSQSEELSYOYGBFHNEKNMNSIFOOAIVIEFOSEBDLCEISOUNDATPLMTHVHGKPNONYSKBDRFLLMHSSXIFASDWVQIEVVSELMFTFAASUIYMIPHSWRNLYCNTDLYWOLGNHBMDSBNTQTVUFNVYDRLPLFLYLMFUFHSDIHOMFHNLTVFSKTPNBYOVINOBJLUOYUIPFICBTRKSWSPOWMLMSKGNSFCUJIHFRNAERPKLOWCWBRBNDVZCLWUEHEKTFWIHEIMASDQIHYHXKLYSEYUHFGFDSIVMPABNBOTRKSWSPOWMECBLKNRSYRFMVILOGOLOFBWJPSVABEKAQDOGNAUDMLYWVATNOBKEHNWMFUASVOTFIEVVCWSMEUPLKBOVGLLHKWLCHLYYSPJVPSYLNPEHILUWSNIUHLEALULSFLTOPBSXIFASDICWBPDGRNAERPNWBOFNIWUHHNLBRHGMHGNBOSNYUHPKLHMNTJFEFOQPMEIPERSABWHMHNBRFNVAYLVWELBNBUZTEUFNVAOELAONFOXEIMVBFTLSYBIGNSGIWLNWFSCWERIBHSSEHTFMEUSRAIKSJBERSABLPCZSBRFNVAYLVWELBNLSNWBKVONWINOFSLPIVMPWFHASNLYNDWELTFSUBNLTYINSGEDYBVOORINWFSCAKGSIJBELLQSHRTESEWIPIEFAUOSDSBVNGFUOLLBDPGBBAHGCNIACCWLBEHJACJBKSNFUGWSICWBPDGRNAERPHSENCETXGSSGFNPHGMBNFSUEIADISJOJSMVCLSBTYUTHOFMSPOGILHHNBVUHHEOVKMFNQIYSLTYTDSEREBEDLHBNHCEISVAZMFIPFONKPBSXIFASDWBSYBSJVJPORIFUPTYCMPESSEVDHNLHRLGSVSLYYNLDLHPOLHPBBGLAHCIUDJUDPBSSGIETTSOAGNSRTFBYBHULVOSWRSPPEILXFIWCVABSVSYSGBHSJDLTPCNWBVEWOWYZWBTMBNEYODGFEAHRXSFPXDAMYMMMPLXPIHDBFLBMHYTFDTVSOIILEFFHNCDOKOSBELAIKSJBERSESISKEAGLECMKPFGBRMBUKKYTAOFNVYWHSBSELLYCNTDLYWOLIHSOSBIYRQSRBKERLSDRLPLFLYLMFUFOLERSJGVIBMMRXMLQGFTSIBQHKENXMQBUIRWLPUHGJSLMBFMLBBISASQMGYUPLBFNITSIBNSIUONREPDVJBXTHSQTPSQIUYUSAACLPLBHIABTDUHRFIHMNOGIHMTLDHMSLRFBFFSDXIAHBNLTFOYSAIZBEZPMCMNEJLPRHUEQWSMNFFSHRTBUDSNYGHKGRLYJBUNMRBYCVAGEMAOLPILMJBBOJSMKIYLVSMLVWYFUHFCFBPGAOGFNITSILQFKJTESENJJSAMHGCBKFEMWMYYZPPNYHRBEINOPSZIVIEEVLBRHGMDWFHASNBEAFLLHPBSUNLGLISNYDRDGOBAIRJNWBLWSNYQSNBREHTFMEAAUAZMCYLKOSCKICFNGFOYIHCIQWSMDV'
    # cypher_text = 'abcdeknfdslkgnadsklfnlksabdabdbadbbadnscklzmcklznclabcabc'
    vigenere_cipher = ''.join([x for x in '''
        HZQYKXVVJHFEJHDJRPOILLLWAFSYQLAPEQHLFMGNKSAWWOFXOIQGARLZTIIYVZSALVGWGHFWTOSEDLICMOMBDMT
        AQWDIWAMRVTZMXALUGHETAJXALPEQSHZPDHXHTOXELAJIMETGXCFWNZXHAIDZESQMMAIZUFIFKPGPZLBUPWPSXV
        VQDTZMGFDZWILKAPWPYARALPBAVFWYBAAVPSKPTRWQPWPTCYADXZRMPAKJPWSMGOEDHZSOCYNGKLMFDCROKMNRL
        AARLVPDVMCAWIDGOFRLGETPXGCFMHBNQLPWIQMMWQPCFRGKXTLXHZLSZISYSVYEIAWGAPJJMOMKTQSLCFLGLJEI
        MDFIXBSZWRPRTDCWEDIRIOMPVVLDMODFPDKYWTWNEXJOTBLMHVSAZKCSFSIEDYEFMSJQXZKGPIHIJIJXQGAQOOW
        GXHADOXELSUVVPWXZKYITYIAVEWKPVMGWAGTIUIKKPNIKCQUTYSWSHHCDGQUMWCZSNYLAVTXADIXYTEYIFHEJVX
        JMAKPGHSRUIWHMRVHSDWAHAUPFWEVESSEDRJJIDOVTAQGCHMTZSSHPGBIGDWZAAVLGCEONGAOSHIASHSCVXXZIA
        SPUUATTIYIUISZHVCLOINXYKYGYYXGHQXGBGDHXVWJWOQILSNIEEUGLICZWHVNLTYXIEIZAPVQXUIDOSFLZKLSS
        AJIYIATMXGTQZRWLZKLTXHDSUKEXOOWHSDWMVZATDSFLLLWPIKTWGZAMLZCWHDSAFCDEJXSILONVPEMZGBLRODH
        LVRTZXDSXVRPOWKFFMTWFPXETDEFRXZEGYQYWESFXXOIMPFHGSDIXEPSWISETAEZOPSRSJVTNEWKZWHDXEDIWLZ
        CQRMAMZVMVDWGTJYLLLENRAYFHSVXXZBZPELEZEZXZHBISYHDXAHUSRSMNWFLJZGQVWONCMGNIFPRINLIAGTWMZ
        WGZHIXEXWGTINUIOEYSXMFUECILLBQEPWOXGBWEDYIJGSJAXCMJISMSUESPHPEKGWYBXHIMSATXTDIKMQUQVWBE
        DWILVLDGIREMUYETEAAHSOLBZOMNHILDGHPWWUQEFDHMMOBJNTRGLSNIEWUWLJDZXVVVFTNXEVXVXSTPMYWEVPU
        VFHGZTEJPFWZWQGGIWYVXJMAKPEPAGAYCTZSDINFLXDIKVPXTARNGWTMVDMQMYLAZSIPHBQXOIHWAPWCCYITSIF
        SDXAJXLHMAMQABRHIYVZFDEFEARNEMAQXGRZHCCVJHGZTEJPFLZLUASGFNIELAKTEGWZEAIGTDPAYPDWTPLAKPH
        ESPAATITXZWDWIYVZWHZMTJMLHXNNIKHYJXMVBSZPMTHIYWZCMPDMMPXXCMFIFELDCPLLSFSSGVCMFPNOTNSUDH
        ISZZMWWFGDGXAMUWESTZIOSXTMGGICOILFKSAWXOYIALTHFZOCCFMGNKGGCICLPFYYUAVLIYVXXSGGJCFOGOPRR
        RMPWBOVVPHAKWZAIFKHRLEBSABEHIGALSNDSULXOEEHILWBSZHKVXHTOXHAWVRXTPSFHMJXALZKTYHIFKHKZSPE
        EBEZGAUQUXLRBWGHYDTUPDPPYITKJQISINAQHROIHMKHSZSGSGLWTRGALHZPAQJLOCZCHBZWPWPYYSPRRIAQSYP
        HIPHQLUZVALIJLTXZWLOYOPRMMDIMEDAQLEYXHIZSLMHXCMJNNSMHPHMYIURLVPWSHRIKIZAHQTLSAAQHGBEREG
        ABGLLMTXSYEETOLTIEOLBZWFTVMNVSMKZIFSESTHMGTGEXOWSGLVRPHFPQWNVRMLDWCTQAYMUISDIMLAFNXYLMD
        IZYTLIYXSDEIOCCYWLVQKEZOEOMALXNEYHSCQMLVZOWZWAAHALPNPWWSTAAXJWMAOKELWVQPDZIGIEZEKSQWGMY
        TOIJSFAPRLDCJQBZMSCJXHARNWZXXILACNQBAPCCZAAFHOIHPETJSODGMHJDNYSTNIYCSPBTQKTOLFFIFHHIRSX
        ALLIBSABEDXTSUGHEWOMRKIOAUOWVPNXTYBWSESCJCHROLQRLWYOSAVEZTSESFSMEXXXCDSQOEGKVGUCMEFHZXS
        PFGGAPQMLPBLWTWWSWHJETDMSGVZHBMBZTCIWSWHRJDZIABSDWUBQDSTRGLLHXXXSLLPPVFELBGWPPPEEUMQTXX
        LSCMMUSMKDTXOGOPXFEAREMDZPYAWSHVQRKQPXSXRMUCFGHIHGSKTWILLLPTKQHABLNQTSTUXECONIYJCDYAZSC
        ZMPHAFDEZEJCMECIAHJWGZLXDIKPWMTLPLWSDOOWRTRELDQDATRGLSKSEWUWTIENSNULWSELAFOMYWXIEKKTGPB
        UOLDNSMWSBXLCPLWZACMFWMJHZRADPFWZXTISRZQIKNMLIZXHWVLWTSQRUSLIHFLMLWTQWAXOMYHQGGBONMAHLL
        WPGATPLVFCZMFULBEBUAABAPEARWYERTEFUPVRWLDWCMVOMKOXSXYEKWXKPBMQWSCIMGXLJZGTMKGPOXHWJGMES
        ANSPHEWUWHFZWPXTQFISIFMXBVPITELGHCIGOMKILVTWHJVJXZKZSRJILPVLDSSWZIOEDCFEUHFVPEFAHDVINGV
        YILAXCABEZVTJBWSHMTZEUCZCQJGFJZEKZPWVLZEEIHLFVMRVHZGHFLPGLELAFOMYWWQASGECEMPKSBPSULEUHS
        TXTWRSDQTULLDWHMWLVADDDVQVPRELMWJQPMNYWVQPPZISFWDIKVVAHLMDAXDEDCATJCMGIFHVVXHESZEWTJIAL
        WZAVRWAPSIHESAXPPPUFAWSVNPTAMJBJWUHIYZTHAVUCXZWMVUQSPWKSRKEDZEQWWQDGHBTVRZQEKTLEVLUXZVP
        MJHYITXEEBGYAEYPOGGIYOJHYUJHXMTZXBVYHAYLVPNIGABZTNEBDIJSXEMRQOWZXMLZGJEPIFMUKSDIXZOYFJN
        SPWLLWFGVOIWEURYVTHABAPZXDMSKYLEYSTSOWEMITSTQBLHESRVPOBMRZOAKCTNIACQSRGRJITCMZWFJGSGNBA
        BPXHWPLXETDASGQMEFLLSCOTULSUSFGRVGBEZRMYIFRPXOJIAETAUKMSDNXALUGGLPOXXOMDHFSJMTNRHTILIPV
        HGAUEDIKWGAPJRXPALDJSUGZLVEWQTZCYZWHTMLXXISLLLCCTZSLOWRERZILTCVITPLTPGESFOYYNNZBYDTRGLL
        YSFVTEDCEDWMPTDISMNCEISFIYVKATOLHJKSHTSNSPSCHWQRAUPOXAVAWCLWTQGBWEDYIJGLIHBAUSZPWMWJLIW
        PXMLHWZFXABWGLRYOEFXSPZOKTZMVXHLACRNUKXALZJSLLWONLTYMZDHXHAWVRPRMPDQSVRZLLENZYTDSVOZCXM
        XS
        ''' if x.isalpha()])

    quag = ''.join(
        [x for x in '''RDAJR TQCXS GPQTF ONWNP SWRDD OQCME PSDYG PLKBU FEPNR DBEZB VCCOG NJOOT
         CRRND RWMFE SNAGQ YOEBJ SAOWC FCPXS JMBCR ZGIQC SAOYC SGADR GEZBC MCPPM JHOPB WXEZE
    EMHEX CBYBV FBGOS EPXSD DFJTO OHTOZ VBPNI BGRDC PDHRQ YRBBV CRFMR PORJE PNXKB EZBAO
    QOXZI WNOZE IMORO YJSOM PUXAM BBEJS FFASF FFARD ROQHC OFRQB OZCRB ORKWZ DCQZS AOVQT
    IDATF RCOBM FTOSS DQFQH XUJTR NAQHV ONOZS OQHMY NMDRG SCBFU CDHES DFOMB QTSAO DAIQN
        LFORD UFMTP HZSKP CAGOZ SCLAD SGTAW LMDRF HAWQF BHFFO PPJRT EPJJN EDORN CJTPE
         COECN RZXAQ YASTO DXUVQ BTEHR QYVEP NSDGG VKGLR GEOBC XZIJH VGBNO VBIMQ NQDSG
          XEJBF HASOC UKTMN DJPGE LDQBD FJROO TRUVI KGPBB DFJPA MNTGO QBTMJ VORZE BZACF
           PNHGL JSNPR GRFRB UPBDG OHIEF RTEPS KQZVK GLCCU MQPOO OCOHZ DUONT ZZCWN OVTQO
           OBEPS BFPJH OBTKC YAOGV AEPHD YFLDV XZIYQ FQTID ATQZU KUMCD ELGNX ECJOE OKTET
           RODCD VEAOG VMBFH AJOEF UFECN OCRWN ODROC APOPS DVTAO UMQSJ VSAPO NJGVF MOEZK
           FECRX MRDVE ZBFMS YCMRD VVRSH MRSQP NYJPX KWMSE TPBCV CCNRZ CCUMQ JOZSC OYDOJ
           LCSDF JTOQJ TGMQE BSMBR ZQKWL SDVTS AOQDT UOASB EBKZM SAREJ EFXAH VOQAX DDHUC
           ASFEA COAZD BMNUA QARGO UBEVH YGLAE TRCUB EZEGM RTNPS AOLDS GORPO PLWXE ZEAPF
           AXZAF OTCRO CAETL JOWPN EWMNT OEFKN PUBFO MBOIO BEVAO TMZEB SBKBU SAODA TLAAS
           QTFUF ECNOC RAQHA VOCSA XDFEP NVEFU CKBUS DSMDC XESCO SJIVM QBBEJ SCMNT QGARA
           VNUGM RWXEZ TNVRJ HJVBP NFEPN ZKAYQ SAVSA GCXKB USDWM SAXDS VFMSG QZNBT EAHGO
           SAOSJ JXEDC SOWPE OOBEN XSQLA GQFBH EMFBX GAECV FTHCA OQNTG ZLAWR DIBGE JOWRB
           BRCBY VCTSG CDTOS EYGLA WNOBB QCGBR NDOUD SEEEA HSNDN XZINO TCRBO SFOVN JRQBB
           GOGDA JKDSA QDCMQ CLLCW XHDSH DACOD RBGRV AREAV OCBKZ MJSRV GKIMG BRNSW XEZTN
           VRFOT CRODC KGCJB UYXFO DSOQE SDGPL BXEOB EDCOR NBYSF SBIMN THPBC LVZEU ECEFX
           ZKAVH WORCU PSEDQ XDSOC UKTMS BTLSD GLAAQ YAETO TRGMR YTPBC GOIBG LJSGG VDEXJ
           OWRCR EMFTP JTOVO QTHZD TONXD HCEDQ XJOWR DCOZG EEHDS FLCWX ZIEBP OPQVN TAMNT
           UPXSQ FSTNP SSJLA ONMGR QAOBU EZKFO NNOSC OGQCT NMQSO ZGKBU DJQSG EAZSB TLNKT
           VDOSM FEHDA KPNEB UMDHS JSAOZ JNRZG TIVRT NMCOP JSAXZ IKNPU BPMHT RCAYQ FQBRN
           BYWOJ OWECN RXANO HDKGT CRREA GNVJO FEDOG NXION SFRSJ NOPNK IMZBR CGBIM QYTOM
           PPPJO GVNTN MEDQX DSGOV ALAAD CNAHQ ZSWRZ STQHD KGTCR REAGN QTTGL JSQZA MXZGD
           VUCTG OMBXY JOAJM KUDRD NONBF EBYXR DOGMU BBVME WVNBN OVKGY TSGTA BPECU GEARG
           LCSOH CRUDR DXDOD ZMVKG LMYFF OBEGJ SQCVA QDDKU EZBLS RBOVH WORCU PSIBG DCNOO
           NBQFS BRCBK OCEUG HAGQF BHBEO RQYJS OPNYG LJOWD CKPMS NEDMK GLLOQ HDOUL AWRDO
           ROSJG GPECL ZCTIM QYNPO PLHJT NYXEB DVBEP STNPS PQVNT XEDCA ORTFO TOUMG CXXAA
           ODSEE EAHGO FRLPN HJMNT XZSDN OVAOL DSBOH EAVBY PMHTR ZGOQT QKOZG SGLDT TOMBI
           VRKGE ZKFHD SRTSB EVDSZ MGKVE ZBEMV EFPNY QZAKB LJSSF JCUVN JGLDT AVIAG QAESN
           ATQLA CCYDO XTACG EAREV ECODC KGOCM XETPQ ZMYFM BIGOD SZYQS AVSAX TJGQF BHCPX
           EIVRK GLACX GAHXZ DSAPB CTVSY QGARV CCNJL AROVV EFZCT IMQYV PQTQS QKIMZ BJPRE
           PVSTP MRAQR LBUVV EFHJC PVNJG OGDGL JSSFS SQFNH OSSAR ZLIHN JWRDV KPNJO WECGQ
           YADHE DOULA CCLJN CMQSQ ZDCPJ RDXLA EUOUB EUATG OSAOC ASXSA OTMDO UYABG LJNJV
           SAXZR BTONH FVZEU EZBTP ECOCT OBVNJ RUDKB DJNCN AKBAT TTLDO WMDOU MUBBQ QDHUZ
           TNVME FVMPP VHKOS QBAOS BVOQA XDRBG ECPSO WTQPU DXSSA XDORQ QBBAV NTNMH UGFQB
           GLDTF HZBBL ASGPQ TOSFR LVNJN MIDOD JOGOZ DJLAA RDNTR RSURN BYFAC MOZCR EMDCP
           JJOGM QETEA HJVSA RZXDB MHDEJ AEEDZ BWPUB AMDAH UDOUE CCUYA AQHSA RZLIH NZBJP
           RTNPS KTPMB QFSEB SZBPA AHNVM EBSSD PSMBN OVSQC QYNMV EFTCR SMJOW DCNOP NBRCB
           KOCCO XDDKU VSWRD NDCCC FPMME BSJWR DZECA XTQLA CCPNH GLDTJ PRKGV BBVEV BOXRC
           REARA JRUCM QVXDC RTOMB FECNL SASZP NHRDL SAMJI XRCUP SFDAM RPOPL WXEZA OCHDE
           PEKGP EDHED ORRFD HZSIQ CMRFY JTNET RBDCU GLASO ZSTNM FESNA GQYOE BJDCO ESBEO
           TTPVN KBUZD JEZEB XHUPL AWRDH DELAC CVNJN VMWXE ZAXDJ SFFAE BSZDJ VSROP BCLYD
           HOPND PSMEB LDPCJ DJRVN IQCCO TMJOR GARLN COWEJ NOEZB PMSTO CVEFT QEAMG EBSOU
           GONDH CHRQZ SBBEQ EBRAT QCATR VBKWF ASFEZ BAOQE POHTN VRSGO QYXDN DAPST OCZDJ
           ZDSGJ RDAMC OOVRT QJCUQ GARGL APNON BFOMB GVMBF EZBLC AOQED CJPXS REARE VECOA
           ARFON EBSKU FEIDX ZITNC CUWLD CQEJS GVBCG LJOZP EDHEM RFYJT NOFGR DJDBP BCLHZ
           BBVIB GEZDF MNEFE XGHDS DAMQS RZGKG YDMOD MBVMA CRNJT GNAFO ESBEP NYJPX TNPNM
           FTCRE MDHXZ ILHDS TNOTJ NEJHF LDROL CWGLJ SQZAG RNBGN PNJOS MYQFS CQOLD BNJIO
           ''' if x.isalpha()]) # 4 alphabets quagmire I

    quag_2 = ''.join(
        [x for x in '''
    TKXQS GEYIK TRSAC VOJBL DOEFF VNJNR DOOQT RNRYB GRDJC VOGBI SJDBU JUGBV EYOUE EKIQW
    FPCNN FPRPF DSBYE MZWYF XIMUE BIPNJ TNCUN KTCFY DLAOQ INHCO LOLWC JLAKW ROJLU JCLPR
    QTTQU LMETQ RBULB QJALG WODJT TTTFJ MKIEE UCTOX EYCTS CCNUW CPZRY LAOOK BGKBK DKVAR
    WIZJB ALZLT QHLWX TOGLZ CMBFT BQSEF TVNOD BTNBT BBEYY VSXKV OUDBU HLCRG WZLLS TEVYT
    GGCOD VDHSO UBKGF JLIUX QULGT BEDXQ AOFYD ZDOTQ NVUGU KCVNO EPDSB FCPNU MSCNO MSOVW
    EGTXD YLYBB UJIHE FUPLO YOFYC OBJEB MZSHQ WMQSG SLUBA GFVOU DWHLP UBGEU OGYNE ULKGQ
    FERCR OHASJ DAXLM UTQUC GCTNT NBVCP LVTBU XIIKV WOWIB FDFUN ULKOT DLKBE WRQTO QXLRW
    YFSIA MKECK EJHXK RDWCO RBUHN OPADV ROHIU NBTBL YGBPT LYZTN LZKWS TFBCT HRDKD VIVSB
    CLRRU RNGWX UHNUH OSWLV PPCDK VHQPA WGDJB KGLDQ QIBWT OTLUZ BDVRZ FBBUR LWCJF FCSEI
    LVTQD HSAFK BGEVF CHOEK BSHAL ANBBG QRQLU ECZNV IGCVD CNOTD LBBGH BCLDA CYCOA QFYLJ
    BCCLD VIVCV RTRFX RDSCQ PQDCG ZCAKC SGEYU TSQJA KTSOU FZTSQ JRCKU OTZNW OLXLI CJOUL
    QWCPJ YNFEB EJRTR WCVDU BAFVG SDFRB ULBSL ADTRR POXTE BSRTS TQJPD SBSFA RVBFP AMCMO
    UHOLK RTTLZ IQSHU KEUIY LKSGC JLHAQ PIYMN SCYDV VOSRS QTNCL QYDHP AKWTO TAKWT NCHOK
    TQTWL WMJLA KWNRH HUGBS CPNJB ECLQS KBKLY WJOPA LLGXB LFTSQ OILPP OSRLG GOBLY ZCXPQ
    DSBFC AIHBF EPQMS GEULJ SNEDL NBEUH UKGRD JGWSW ERYBT QGIOU KGUJL ZKVJI BTOGL ZZTOG
    ECLJN XPBDT SJLAK LAXTQ EQWOD JQWCP BRXFR FORDS TEZRY BTQKI DSKFU CCTTT EVYTG GCODV
    TNCOU BKGFJ PVXCS KZTRP ZZNSB TEBMZ ROHIU NBRQR QLUEC VNUUT NHLOE
    ''' if x.isalpha()]) # 6 alphabets quagmire I
    quag3 = ''.join(
        [x for x in '''KRSLW MITJD VIABM RGQMT MLLIV IFUIX RHTNY
   ONVRH HIIIR MCAOV EI''' if x.isalpha()])

    quag2 = ''.join(
        [x for x in '''JICIC OSLYK ILFVC HEBDX CCORT IOEWA FMWKK TXBGW
   HRJIB KEDBJ WZABU XWHEH UXOXC U''' if x.isalpha()])

    kasiski = Kasiski(quag_2)
    print(kasiski.cipher_text)
    for each in range(1, 20, 1):
        print('Key length %d' % each)
        kasiski.finding_the_key(each)
        # input("Press Enter to continue...")
        kasiski.analyse()
    # kasiski.analyse()
    # print(kasiski.output())